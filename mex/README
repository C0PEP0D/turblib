JHU Turbulence Database Cluster
Matlab Interface Library
http://turbulence.pha.jhu.edu/

**** About this package ****

This library provides a gSOAP wrapper for calling the JHU
Turbulence Database Cluster.

More information can be found at:
http://turbulence.pha.jhu.edu/help/matlab/

Users should first check that the Makefile variables are
specified to reflect system settings. The MEX variable should
point to the 'mex' executable located in same directory as the
'matlab' executable. The 'bin' directory can be obtained by running 
'[matlabroot '/bin']' from the Matlab Command Window. The 
specification of the 'mex' executable can be accomplished by either 
specifying the absolute path (which includes the result provided
by running '[matlabroot '/bin']') or setting the PATH environment
variable appropriately. 

NOTE: Users can adjust the MEX variable in the Makefile to build
for GNU Octave if Matlab is not installed.

Runing 'make' will build the Matlab MEX functions which are 
called directly from Matlab. The file turbm.m is a sample 
M-file that demonstrates how to call the database functions.

**** Identification Token (optional, for now) ****

While our service is open to anyone, we would like to keep
track of who is using the service, and how.  To this end,
we would like each user or site to obtain an authorization
token from us:
  http://turbulence.pha.jhu.edu/help/authtoken.html

If you are just experimenting, the default token included
in these test files should be valid.

**** Mac OS X Notes ****

You will need the Apple Developer Tools (Xcode), which
can be found on your OS X install disk, or downloaded
for free (with registration) from:
   http://developer.apple.com/

**** Linux Notes ****

Most versions of gcc should work.  

**** Other Platforms ****

Not tested.  Pleae let us know if any changes are needed.

**** Error Handling ****

By default, the turbulence library will print errors out to the
Matlab command window and abort the program.  You can change this 
behavior by changing the line in mexlib.h from:
  #define MEX_MSG_TXT mexErrMsgTxt
to
  #define MEX_MSG_TXT mexWarnMsgTxt
and recompiling the mex functions. Errors will still be printed to
the Matlab command window but you will then be responsible for
checking the return codes and exiting the program if necessary - see
the 'Handling intermittent failures' section below.

**** Handling intermittent failures ****

We suggest writing long-running code to handle any intermittent network
or database failures which may occur.  The following sample code will
try each query up to 30 times, with a delay of 1 minute between each
attempt.

In addition, we suggest adding checkpoints to your code to allow
for the continuation after longer failures.

___Example:___
SOAP_OK=0;
nquery=30;
epause=60;
for i=1:nquery
  [result3, rc] =  getVelocity (...);
  if (rc ~= SOAP_OK)
    if (i == nquery)
      error('Fatal Error: Too many failures');
    else
      fprintf('Temporary Error: pausing %d seconds\n',epause);
      pause(epause);
    end
  else
    break
  end
end
